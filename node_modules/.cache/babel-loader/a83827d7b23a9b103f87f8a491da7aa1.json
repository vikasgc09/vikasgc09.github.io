{"ast":null,"code":"var _jsxFileName = \"D:\\\\react\\\\quiz-app\\\\starter\\\\src\\\\App.js\";\nimport React, { useState } from \"react\";\nexport default function App() {\n  const questions = [{\n    id: 1,\n    questionText: \"What is the capital of France?\",\n    answerOptions: [{\n      answerText: \"New York\",\n      isCorrect: false\n    }, {\n      answerText: \"London\",\n      isCorrect: false\n    }, {\n      answerText: \"Paris\",\n      isCorrect: true\n    }, {\n      answerText: \"Dublin\",\n      isCorrect: false\n    }]\n  }, {\n    id: 2,\n    questionText: \"Who is CEO of Tesla?\",\n    answerOptions: [{\n      answerText: \"Jeff Bezos\",\n      isCorrect: false\n    }, {\n      answerText: \"Elon Musk\",\n      isCorrect: true\n    }, {\n      answerText: \"Bill Gates\",\n      isCorrect: false\n    }, {\n      answerText: \"Tony Stark\",\n      isCorrect: false\n    }]\n  }, {\n    id: 3,\n    questionText: \"The iPhone was created by which company?\",\n    answerOptions: [{\n      answerText: \"Apple\",\n      isCorrect: true\n    }, {\n      answerText: \"Intel\",\n      isCorrect: false\n    }, {\n      answerText: \"Amazon\",\n      isCorrect: false\n    }, {\n      answerText: \"Microsoft\",\n      isCorrect: false\n    }]\n  }, {\n    id: 4,\n    questionText: \"How many Harry Potter books are there?\",\n    answerOptions: [{\n      answerText: \"1\",\n      isCorrect: false\n    }, {\n      answerText: \"4\",\n      isCorrect: false\n    }, {\n      answerText: \"6\",\n      isCorrect: false\n    }, {\n      answerText: \"7\",\n      isCorrect: true\n    }]\n  }];\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [score, setScore] = useState(0);\n\n  const nextQuestion = isCorrect => {\n    if (isCorrect) {\n      setShowScore(showScore + 1);\n    }\n\n    const next = currentQuestion + 1;\n\n    if (next < questions.length) {\n      //   console.log(questions.length);\n      setCurrentQuestion(next);\n    } else {\n      setShowScore(true);\n    }\n  }; //   const prevQuestion = () => {\n  //     const prev = currentQuestion - 1;\n  //     if (prev >= 0) {\n  //       setCurrentQuestion(prev);\n  //     }\n  //   };\n\n\n  const [showScore, setShowScore] = useState(false);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, showScore ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"score-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, \"You scored 1 out of \", questions.length) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-count\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 15\n    }\n  }, \"Question \", currentQuestion + 1), \"/\", questions.length), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }, questions[currentQuestion].questionText)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"answer-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }\n  }, questions[currentQuestion].answerOptions.map((questionOption, index) => {\n    return /*#__PURE__*/React.createElement(\"button\", {\n      key: index,\n      onClick: () => nextQuestion(questionOption.isCorrect),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 19\n      }\n    }, questionOption.answerText);\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => nextQuestion(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  }, \"next\"))));\n}","map":{"version":3,"sources":["D:/react/quiz-app/starter/src/App.js"],"names":["React","useState","App","questions","id","questionText","answerOptions","answerText","isCorrect","currentQuestion","setCurrentQuestion","score","setScore","nextQuestion","setShowScore","showScore","next","length","map","questionOption","index"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nexport default function App() {\r\n  const questions = [\r\n    {\r\n      id: 1,\r\n      questionText: \"What is the capital of France?\",\r\n      answerOptions: [\r\n        { answerText: \"New York\", isCorrect: false },\r\n        { answerText: \"London\", isCorrect: false },\r\n        { answerText: \"Paris\", isCorrect: true },\r\n        { answerText: \"Dublin\", isCorrect: false },\r\n      ],\r\n    },\r\n    {\r\n      id: 2,\r\n      questionText: \"Who is CEO of Tesla?\",\r\n      answerOptions: [\r\n        { answerText: \"Jeff Bezos\", isCorrect: false },\r\n        { answerText: \"Elon Musk\", isCorrect: true },\r\n        { answerText: \"Bill Gates\", isCorrect: false },\r\n        { answerText: \"Tony Stark\", isCorrect: false },\r\n      ],\r\n    },\r\n    {\r\n      id: 3,\r\n      questionText: \"The iPhone was created by which company?\",\r\n      answerOptions: [\r\n        { answerText: \"Apple\", isCorrect: true },\r\n        { answerText: \"Intel\", isCorrect: false },\r\n        { answerText: \"Amazon\", isCorrect: false },\r\n        { answerText: \"Microsoft\", isCorrect: false },\r\n      ],\r\n    },\r\n    {\r\n      id: 4,\r\n      questionText: \"How many Harry Potter books are there?\",\r\n      answerOptions: [\r\n        { answerText: \"1\", isCorrect: false },\r\n        { answerText: \"4\", isCorrect: false },\r\n        { answerText: \"6\", isCorrect: false },\r\n        { answerText: \"7\", isCorrect: true },\r\n      ],\r\n    },\r\n  ];\r\n\r\n  const [currentQuestion, setCurrentQuestion] = useState(0);\r\n  const [score, setScore] = useState(0);\r\n\r\n  const nextQuestion = (isCorrect) => {\r\n    if (isCorrect) {\r\n      setShowScore(showScore + 1);\r\n    }\r\n    const next = currentQuestion + 1;\r\n\r\n    if (next < questions.length) {\r\n      //   console.log(questions.length);\r\n      setCurrentQuestion(next);\r\n    } else {\r\n      setShowScore(true);\r\n    }\r\n  };\r\n\r\n  //   const prevQuestion = () => {\r\n  //     const prev = currentQuestion - 1;\r\n  //     if (prev >= 0) {\r\n  //       setCurrentQuestion(prev);\r\n  //     }\r\n  //   };\r\n\r\n  const [showScore, setShowScore] = useState(false);\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      {/* HINT: replace \"false\" with logic to display the \r\n      score when the user has answered all the questions */}\r\n      {showScore ? (\r\n        <div className=\"score-section\">\r\n          You scored 1 out of {questions.length}\r\n        </div>\r\n      ) : (\r\n        <>\r\n          <div className=\"question-section\">\r\n            <div className=\"question-count\">\r\n              <span>Question {currentQuestion + 1}</span>/{questions.length}\r\n            </div>\r\n            <div className=\"question-text\">\r\n              {questions[currentQuestion].questionText}\r\n            </div>\r\n          </div>\r\n          <div className=\"answer-section\">\r\n            {questions[currentQuestion].answerOptions.map(\r\n              (questionOption, index) => {\r\n                return (\r\n                  <button\r\n                    key={index}\r\n                    onClick={() => nextQuestion(questionOption.isCorrect)}\r\n                  >\r\n                    {questionOption.answerText}\r\n                  </button>\r\n                );\r\n              }\r\n            )}\r\n          </div>\r\n          <div>\r\n            <button onClick={() => nextQuestion()}>next</button>\r\n            {/* <button onClick={() => prevQuestion()}>Previous</button> */}\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}